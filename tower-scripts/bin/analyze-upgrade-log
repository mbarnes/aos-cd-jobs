#!/usr/bin/python
#
# Analyzes an upgrade log and produces a summary of high-level
# operations, Ansible plays, and input requests; with the line
# numbers from the upgrade log for further details.
#

import argparse
import colorama
import datetime
import dateutil.parser
import json
import re
import sys

def common_prefix(strings):
    """
    Find the longest string that is a prefix of all the strings.
    """
    if not strings:
        return ''
    prefix = strings[0]
    for s in strings:
        if len(s) < len(prefix):
            prefix = prefix[:len(s)]
        if not prefix:
            return ''
        for i in range(len(prefix)):
            if prefix[i] != s[i]:
                prefix = prefix[:i]
                break
    return prefix


class BaseStyle(object):
    def __init__(self, stream, stack):
        self.stream = stream
        self.stack = stack
        self.style = None

    def __enter__(self):
        if self.style and sys.stdout.isatty():
            self.stream.write(self.style)
            self.stack.append(self.style)
        return None

    def __exit__(self, exc_type, exc_value, traceback):
        if self.style and sys.stdout.isatty():
            self.stack.pop()
            if self.stack:
                self.stream.write(self.stack[-1])
            else:
                self.stream.write(colorama.Fore.RESET)
                self.stream.write(colorama.Style.NORMAL)


class LinenoStyle(BaseStyle):
    def __init__(self, stream, stack):
        super(LinenoStyle, self).__init__(stream, stack)
        self.style = colorama.Fore.BLUE


class ErrorStyle(BaseStyle):
    def __init__(self, stream, stack):
        super(ErrorStyle, self).__init__(stream, stack)
        self.style = colorama.Fore.RED + colorama.Style.BRIGHT


class MessageStyle(BaseStyle):
    def __init__(self, stream, stack):
        super(MessageStyle, self).__init__(stream, stack)
        if len(stack) == 0:
            self.style = colorama.Fore.GREEN + colorama.Style.BRIGHT


class HostsStyle(BaseStyle):
    def __init__(self, stream, stack):
        super(HostsStyle, self).__init__(stream, stack)
        if len(stack) == 0:
            self.style = colorama.Fore.YELLOW


class InformationStyle(BaseStyle):
    def __init__(self, stream, stack):
        super(InformationStyle, self).__init__(stream, stack)
        if len(stack) == 0:
            self.style = colorama.Fore.BLUE


class WarningStyle(BaseStyle):
    def __init__(self, stream, stack):
        super(WarningStyle, self).__init__(stream, stack)
        if len(stack) == 0:
            self.style = colorama.Fore.RED + colorama.Style.BRIGHT


class SkippedStyle(BaseStyle):
    def __init__(self, stream, stack):
        super(SkippedStyle, self).__init__(stream, stack)
        self.style = colorama.Fore.BLACK


class Line(object):

    MIN_DURATION_SECONDS = 10
    WARN_DURATION_SECONDS = (60 * 60)  # 1 hour

    def __init__(self, lineno, message):
        self.styles = []
        self.lineno = lineno
        self.message = message

    def write_lineno(self, stream):
        with LinenoStyle(stream, self.styles):
            stream.write('{0: >6}'.format(self.lineno))
        stream.write(' : ')

    def write_message(self, stream):
        with MessageStyle(stream, self.styles):
            stream.write(self.message)

    def write(self, stream):
        self.write_lineno(stream)
        self.write_message(stream)
        stream.write('\n')


class ErrorLine(Line):

    def __init__(self, lineno, message, json=None):
        super(ErrorLine, self).__init__(lineno, message)
        self.json = json

    def write_message(self, stream):
        with ErrorStyle(stream, self.styles):
            stream.write('  ' + self.message)
            if self.json:
                json_object = json.loads(self.json)
                # Dont' need both stderr and stderr_lines.
                if 'stderr' in json_object:
                    del json_object['stderr']
                # Don't need both stdout and stdout_lines.
                if 'stdout' in json_object:
                    del json_object['stdout']
                stream.write(json.dumps(json_object, indent=4))


class PlayLine(Line):

    def __init__(self, lineno, message):
        super(PlayLine, self).__init__(lineno, message)
        self.timestamp = None
        self.duration = datetime.timedelta()
        self.hosts = set()
        self.errors = []

        # None  = unknown
        # True  = all hosts in all tasks skipped
        # False = at least one task did something
        self.skipped = None

    def write_message(self, stream):
        style_class = SkippedStyle if self.skipped else BaseStyle
        with style_class(stream, self.styles):
            stream.write('  PLAY [{0}]'.format(self.message))
            with HostsStyle(stream, self.styles):
                self.hosts.discard('localhost')
                n_hosts = len(self.hosts)
                if n_hosts == 1:
                    stream.write(' [{0}]'.format(self.hosts.pop()))
                elif n_hosts > 1:
                    prefix = common_prefix(list(self.hosts))
                    if prefix:
                        stream.write(' [{0}* x {1}]'.format(prefix, n_hosts))
                    else:
                        stream.write(' [{0} hosts]'.format(n_hosts))
            with InformationStyle(stream, self.styles):
                if self.timestamp:
                    stream.write(self.timestamp.strftime(' (%H:%M:%S %Z)'))
            if self.skipped:
                stream.write(' skipped')
            elif self.duration.total_seconds() >= self.WARN_DURATION_SECONDS:
                with WarningStyle(stream, self.styles):
                    stream.write(' took {0}s'.format(self.duration))
            elif self.duration.total_seconds() >= self.MIN_DURATION_SECONDS:
                with InformationStyle(stream, self.styles):
                    stream.write(' took {0}s'.format(self.duration))
            while self.errors:
                stream.write('\n')
                self.errors.pop(0).write(stream)


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('infile', nargs='?',
                        type=argparse.FileType('r'),
                        default=sys.stdin)
    args = parser.parse_args(sys.argv[1:])

    linebuffer = []
    lineno = 0
    task_name = ''
    saw_task_start = False
    saw_input_requested = False

    # Compile regexp patterns
    re_operation   = re.compile('Running operation: [a-z-]+')
    re_play        = re.compile('PLAY \[(.*)\]')
    re_task        = re.compile('(TASK|RUNNING HANDLER) \[(.*)\]')
    re_timestamp   = re.compile('^(.*) \((\d+)\:(\d+)\:(\d+)\.(\d+)\)')
    re_host_error  = re.compile('^(fatal: \[(.*)\]: FAILED! => )(\{.*\})')
    re_host_result = re.compile('^(ok|changed|skipping): \[(.*?)( .*?)?\]')

    timestamp_init = None
    timestamp_last = None

    for line in args.infile:
        line = line.rstrip()
        lineno += 1

        if line.startswith('Input requested'):
            linebuffer.append(Line(lineno, line))
            saw_input_requested = True

        elif saw_input_requested:
            linebuffer[-1].message += ' - ' + line
            saw_input_requested = False

        elif saw_task_start:
            play = linebuffer[-1]

            # 1st line after TASK is timestamp
            result = re_timestamp.match(line)
            if result:
                timestamp = dateutil.parser.parse(result.group(1))
                if not play.timestamp:
                    play.timestamp = timestamp
                if not timestamp_init:
                    timestamp_init = timestamp
                timestamp_last = timestamp
                duration = datetime.timedelta(
                    hours=int(result.group(2)),
                    minutes=int(result.group(3)),
                    seconds=int(result.group(4)))
                play.duration += duration

            # Subsequent lines are host results
            result = re_host_result.match(line)
            if result:
                host = result.group(2)
                play.hosts.add(host)
                if task_name != 'Gathering Facts':
                    skipped = (result.group(1) == 'skipping')
                    if play.skipped is None:
                        play.skipped = skipped
                    else:
                        play.skipped &= skipped

            result = re_host_error.match(line)
            if result:
                message = result.group(1)
                host    = result.group(2)
                jsonstr = result.group(3)
                play.hosts.add(host)
                play.errors.append(ErrorLine(lineno, message, jsonstr))

            # TASK data ends with blank line
            if play.hosts and not line:
                saw_task_start = False

        else:
            result = re_operation.match(line)
            if result:
                linebuffer.append(Line(lineno, result.group()))
                continue

            result = re_play.match(line)
            if result:
                linebuffer.append(PlayLine(lineno, result.group(1)))
                continue

            result = re_task.match(line)
            if result:
                task_name = result.group(1)
                saw_task_start = True
                continue

    while linebuffer:
        linebuffer.pop(0).write(sys.stdout)

    print '\nTotal time: {0}'.format(timestamp_last - timestamp_init)

if __name__ == '__main__':
    main()
